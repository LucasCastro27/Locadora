package trabalho.locadora;

import java.util.*;
import java.io.*;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class CarrosDisponveis extends javax.swing.JInternalFrame {

    String modelos[] = {};
    
    ArrayList<carro> Frota;
    ArrayList<carro> todosCarros;
    
    ArrayList<Cliente> Registro;
    ArrayList<Funcionario> RegistroF; 
    
    DefaultListModel<String> Lista;
    
    int totalCarros = 0;
    int numeroCarro = 0;
    int numeroClientes = 0;
    int numeroFuncionarios = 0;

    public CarrosDisponveis() throws FileNotFoundException {
        
        //abre o arquivo de txt
        Frota = new ArrayList<>();
        todosCarros = new ArrayList();
        File arquivo = new File("carros.txt");
        Scanner leitura = new Scanner(arquivo);
        
        //variaveis aux
        String dados = "";
       
        int contador = 0;
        
        //salva todos os objetos do arquivo txt numa lista de carros chamada frota
        while (leitura.hasNextLine()) {

            dados = dados + leitura.nextLine() + '\n';
            contador++;
            if (contador == 8) {
                contador = 0;
                carro veiculo = new carro(dados);
                todosCarros.add(veiculo);
                totalCarros++;
                if (veiculo.disponivel == 1) {
                    Frota.add(veiculo);
                    numeroCarro++;
                }
                dados = "";

            }
        }
        
        //========================= CLIENTES =========================
        
        //======================  FUNCIONARIOS =======================
        RegistroF=new ArrayList<>();
        int contadorF=0;
        String dadosF = "";    
        File arquivu = new File("funcionarios.txt");
        try {
            Scanner leituraF = new Scanner(arquivu);
            while (leituraF.hasNextLine()) {

            dados = dados + leituraF.nextLine() + '\n';
            contador++;
            if (contador == 6) {
                contador = 0;
                Funcionario contratado = new Funcionario();
                contratado.FuncionarioInicia(dados);
                
                RegistroF.add(contratado); //adiciona a lista
                
                dados = "";
                numeroFuncionarios++;
            }
        }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "A operação não pode ser concluída porque o arquivo funcionarios.txt não pode ser acessado!");
            Logger.getLogger(CompraDeCarro.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        //======================  FUNCIONARIOS =======================
        
        Registro = new ArrayList<>();
        File arquivoC = new File("clientes.txt");
        Scanner leituraC = new Scanner(arquivoC);
        //Le os Arquivo txt enquanto inicia as variaveis carro
        String dadosC = "";
        numeroClientes = 0;
        int contadorC = 0;
        while (leituraC.hasNextLine()) {
            dados = dados + leituraC.nextLine() + '\n';
            contador++;
            if (contador == 6) {
                contador = 0;
                Cliente pessoa = new Cliente(dados);
                Registro.add(pessoa);
                dados = "";
                numeroClientes++;
            }
        }
        for(int i = 0; i < numeroClientes; i++){
            System.out.println(Registro.get(i).CPF);
        }
        //========================= CLIENTES =========================
        
        //monta um array auxliar para servir de display no gui
        String Modelos[] = new String[numeroCarro];
        for (int i = 0; i < numeroCarro; i++) {
            Modelos[i] = Frota.get(i).modelo;
        }
        modelos = Modelos;
        initComponents();
        
        //inicia os valores que seram exibidos na interface vizual 
        String aux = "";
        marca.setText(Frota.get(0).marca);
        placa.setText(Frota.get(0).placa);
        aux = Frota.get(0).kmAndado + "";
        km.setText(aux);
        aux = "";
        aux = Frota.get(0).preco + "";
        preco.setText(aux);

        if (Frota.get(0).disponivel == 0) {
            disponivel.setText("nao");
        } else {
            disponivel.setText("sim");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane7 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        placa = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        km = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        marca = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        disponivel = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        preco = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ALUGAR = new javax.swing.JButton();

        setClosable(true);
        setToolTipText("");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = modelos;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(jList1);

        jLabel1.setText("Placa:");

        jLabel3.setText("Marca:");

        jLabel5.setText("KM:");

        jLabel4.setText("Preço:");

        jLabel6.setText("Disponibilidade:");

        jLabel7.setText("Organizar por:");

        placa.setEditable(false);
        jScrollPane1.setViewportView(placa);

        km.setEditable(false);
        jScrollPane3.setViewportView(km);

        marca.setEditable(false);
        jScrollPane4.setViewportView(marca);

        jScrollPane5.setViewportView(disponivel);

        preco.setEditable(false);
        jScrollPane6.setViewportView(preco);

        jButton1.setText("Klometragem");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Preço");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ALUGAR.setText("ALUGAR");
        ALUGAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALUGARActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ALUGAR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                                    .addComponent(jButton2))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel1))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1))
                                    .addGap(27, 27, 27)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(14, 14, 14)
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jScrollPane3))))))
                        .addGap(0, 26, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(17, 17, 17)
                .addComponent(ALUGAR, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        //sempre quando um item diferente for selecionado na lista da interface visual os valores são atualizados para exibirem a informação correta
        
        String aux = "";
        marca.setText(Frota.get(jList1.getSelectedIndex()).marca);
        placa.setText(Frota.get(jList1.getSelectedIndex()).placa);
        aux = Frota.get(jList1.getSelectedIndex()).kmAndado + "";
        km.setText(aux);
        aux = "";
        aux = Frota.get(jList1.getSelectedIndex()).preco + "";
        preco.setText(aux);

        if (Frota.get(jList1.getSelectedIndex()).disponivel == 0)
            disponivel.setText("nao");
        else
            disponivel.setText("sim");
        
    }//GEN-LAST:event_jList1ValueChanged

    private void ALUGARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALUGARActionPerformed
        // Altera a disponibilidade de Sim para Não:
        
        
        String cpfF = JOptionPane.showInputDialog("Insira o CPF do funcionário que esta atendendo!");
        Boolean encontradoF = false;
        int x = 0;
        for(x = 0; x < numeroFuncionarios; x++){
            System.out.println(RegistroF.get(x).CPF + " =? " + cpfF);
            if(RegistroF.get(x).CPF.equals(cpfF)){
                encontradoF = true;
                break;
            }
        }
        if(!encontradoF){
            JOptionPane.showMessageDialog(null, "Funcionário não cadastrado!");
            return;
        }
        
        String cpf = JOptionPane.showInputDialog("Insira o CPF do cliente que esta alugando!");
        Boolean encontrado = false;
        int j = 0;
        for(j = 0; j < numeroClientes; j++){
            System.out.println(Registro.get(j).CPF + " =? " + cpf);
            if(Registro.get(j).CPF.equals(cpf)){
                encontrado = true;
                break;
            }
        }
        if(!encontrado){
            JOptionPane.showMessageDialog(null, "Cliente não cadastrado!");
            return;
        }
        
        String hoje = JOptionPane.showInputDialog("Insira a data que o carro será alugado (dd/mm/aa)");
        
        
        String data = JOptionPane.showInputDialog("Qual será a data de retorno do veículo? (dd/mm/aa)");
        
        GerenciaPagamentos gp = new GerenciaPagamentos();
        float preco = 0;
        try {
            preco = gp.calculaPreco(hoje, data, Frota.get(jList1.getSelectedIndex()).preco);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "A operação não pode ser concluída porque a data é inválida!");
            Logger.getLogger(CarrosDisponveis.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
       int resp =  JOptionPane.showConfirmDialog(null, "O aluguel neste período ficará no valor de " + preco + "R$");
        if(resp == JOptionPane.YES_OPTION){
            JOptionPane.showMessageDialog(null, "Aluguel Efetuado!");
            Registro.get(j).preco = preco;
            Registro.get(j).dataEntrega = data;
            Registro.get(j).carroAlugado = Frota.get(jList1.getSelectedIndex()).modelo;
            RegistroF.get(x).carrosAlugados++;
        }else{
            return;
        }
        
        Frota.get(jList1.getSelectedIndex()).dataAlugado = hoje;
        Frota.get(jList1.getSelectedIndex()).dataRetorno = data;
        Frota.get(jList1.getSelectedIndex()).disponivel = 0;             
        
        
        //guarda o estado atual da lita de clientes em um vetor
        String dadosC="";
        for(int i=0;i<numeroClientes;i++)
        {
            dadosC=dadosC+"cpf="+Registro.get(i).getCPF()+'\n';
            dadosC=dadosC+"endereco="+Registro.get(i).getEndereço()+'\n';
            dadosC=dadosC+"preco="+Registro.get(i).getPreco()+'\n';
            dadosC=dadosC+"dataEntrega="+Registro.get(i).getDataEntrega()+'\n';
            dadosC=dadosC+"nome="+Registro.get(i).getNome()+'\n';
            dadosC=dadosC+"carroAlugado="+Registro.get(i).getCarroAlugado()+'\n';

        }
        
        //escreve esse vetor no arquivo txt com as novas informações
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("clientes.txt"));

            writer.write(dadosC);
            writer.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "A operação não pode ser concluída porque o arquivo clientes.txt não pode ser acessado!");
            Logger.getLogger(GaragemCarros.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        //Salva a aleração em arquivo
        String dados="";
        
        for(int i=0;i<totalCarros;i++)
        {
            dados=dados+"placa="+todosCarros.get(i).placa+'\n';
            dados=dados+"marca="+todosCarros.get(i).marca+'\n';
            dados=dados+"preco="+todosCarros.get(i).preco+'\n';
            dados=dados+"KmAndado="+todosCarros.get(i).kmAndado+'\n';
            dados=dados+"cor="+todosCarros.get(i).dataAlugado+'\n';
            dados=dados+"dataRetorno="+todosCarros.get(i).dataRetorno+'\n';
            dados=dados+"disponivel="+todosCarros.get(i).disponivel+'\n';
            dados=dados+"modelo="+todosCarros.get(i).modelo+'\n';
        }
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("carros.txt"));
            
            
            writer.write(dados);
            writer.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "A operação não pode ser concluída porque o arquivo carros.txt não pode ser acessado!");
            Logger.getLogger(GaragemCarros.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        //guarda o estado atual da lita de clientes em um vetor
        dados="";
        for(int i=0;i<numeroFuncionarios;i++)
        {
            dados=dados+"salario="+RegistroF.get(i).AlmentoSalario()+'\n';
            dados=dados+"carrosAlugados="+RegistroF.get(i).carrosAlugados+'\n';
            dados=dados+"senha="+RegistroF.get(i).Senha+'\n';
            dados=dados+"cpf="+RegistroF.get(i).getCPF()+'\n';
            dados=dados+"nome="+RegistroF.get(i).getNome()+'\n';
            dados=dados+"endereco="+RegistroF.get(i).getEndereço()+'\n';        
        }

        //escreve esse vetor no arquivo txt com as novas informações
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("funcionarios.txt"));

            writer.write(dados);
            writer.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "A operação não pode ser concluída porque o arquivo funcionarios.txt não pode ser acessado!");
            Logger.getLogger(GaragemCarros.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        Frota.remove(jList1.getSelectedIndex());
        numeroCarro--;

        Lista= new DefaultListModel<>();
        for (int i = 0; i < numeroCarro; i++) {
            Lista.addElement(Frota.get(i).modelo);
        }
        jList1.setModel(Lista);
    }//GEN-LAST:event_ALUGARActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        
        
        int n = Frota.size();
        carro temp;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < (n - i); j++) {
                if (Frota.get(j - 1).kmAndado < Frota.get(j).kmAndado) {
                    //Code to swap the elements
                    temp = Frota.get(j - 1);
                    Frota.set(j - 1, Frota.get(j));
                    Frota.set(j,temp);
                }
            }
        }
        
        Lista= new DefaultListModel<>();
        for (int i = 0; i < numeroCarro; i++) {
            Lista.addElement(Frota.get(i).modelo);
        }
        jList1.setModel(Lista);
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                
        int n = Frota.size();
        carro temp;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < (n - i); j++) {
                if (Frota.get(j - 1).preco < Frota.get(j).preco) {
                    //Code to swap the elements
                    temp = Frota.get(j - 1);
                    Frota.set(j - 1, Frota.get(j));
                    Frota.set(j,temp);
                }
            }
        }
        
        Lista= new DefaultListModel<>();
        for (int i = 0; i < numeroCarro; i++) {
            Lista.addElement(Frota.get(i).modelo);
        }
        jList1.setModel(Lista);
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ALUGAR;
    private javax.swing.JTextPane disponivel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextPane km;
    private javax.swing.JTextPane marca;
    private javax.swing.JTextPane placa;
    private javax.swing.JTextPane preco;
    // End of variables declaration//GEN-END:variables
}
